import dotenv from 'dotenv';
dotenv.config();
import { Telegraf } from "telegraf";
import { createTransport } from "nodemailer";
import { connect, Schema, model } from "mongoose";

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
const mongoURI = `mongodb+srv://${process.env.MONGODB_USER}:${process.env.MONGODB_PASSWORD}@${process.env.MONGODB_URL}/${process.env.MONGODB_DB}?retryWrites=true&w=majority`;

connect(mongoURI)
  .then(() => console.log("Connected to MongoDB"))
  .catch(err => console.log("Failed to connect to MongoDB", err));

// –°—Ö–µ–º–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞ –≤ MongoDB
const leadSchema = new Schema({
  task: String,
  plan: String,
  budget: String,
  timeline: String,
  techPreferences: String,
  contact: String, 
  userContact: String 
});

const Lead = model("Lead", leadSchema);

// –í–æ—Ä–æ–Ω–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤
const questions = [
  {
    question: "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –∑—ñ–±—Ä–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞—à –ø—Ä–æ—î–∫—Ç. –ü–æ—á–Ω–µ–º–æ! –Ø–∫–∞ —É –≤–∞—Å –∑–∞–¥–∞—á–∞?",
    options: ["–†–æ–∑—Ä–æ–±–∫–∞ —Å–∞–π—Ç—É", "–†–æ–∑—Ä–æ–±–∫–∞ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É", "–Ü–Ω—à–µ"],
    key: "task"
  },
  {
    question: "–ß–∏ –º–∞—î—Ç–µ –≤–∏ –≤–∂–µ —è–∫–∏–π—Å—å –ø–ª–∞–Ω –∞–±–æ –ø—Ä–æ–µ–∫—Ç, –∞–±–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ —Ä–æ–∑—Ä–æ–±–∫–æ—é –∑ –Ω—É–ª—è?",
    options: ["–Ñ –ø–ª–∞–Ω", "–ù–µ–º–∞—î –ø–ª–∞–Ω—É", "–ù–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π"],
    key: "plan"
  },
  {
    question: "–Ø–∫–∏–π –±—é–¥–∂–µ—Ç –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É?",
    options: ["–ú–µ–Ω—à–µ 10 000 –≥—Ä–Ω", "10 000 - 50 000 –≥—Ä–Ω", "–ë—ñ–ª—å—à–µ 50 000 –≥—Ä–Ω"],
    key: "budget"
  },
  {
    question: "–Ø–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–±—ñ—Ç?",
    options: ["1-3 –º—ñ—Å—è—Ü—ñ", "3-6 –º—ñ—Å—è—Ü—ñ–≤", "–ë—ñ–ª—å—à–µ 6 –º—ñ—Å—è—Ü—ñ–≤"],
    key: "timeline"
  },
  {
    question: "–ß–∏ —î —É –≤–∞—Å —è–∫—ñ-–Ω–µ–±—É–¥—å –ø–µ—Ä–µ–≤–∞–≥–∏ —â–æ–¥–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π –∞–±–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏?",
    options: ["–¢–∞–∫", "–ù—ñ", "–ù–µ –∑–Ω–∞—é"],
    key: "techPreferences"
  },
  {
    question: "–ß–∏ –º–æ–∂–µ–º–æ –º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π?",
    options: ["–¢–∞–∫", "–ù—ñ", "–ú–æ–∂–ª–∏–≤–æ"],
    key: "contact"
  },
  {
    question: "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ email).", // –ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É
    options: [], // –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, —á–µ–∫–∞—î–º–æ –Ω–∞ –≤–≤—ñ–¥ —Ç–µ–∫—Å—Ç—É
    key: "userContact"
  }
];

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–ª—ñ—î–Ω—Ç–∞
let userData = {};

bot.start((ctx) => {
  console.log("–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç—Ä–∏–º–∞–Ω–∞");
  const chatId = ctx.chat.id;
  userData[chatId] = { stage: 0 }; // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
  askQuestion(chatId);
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è
const askQuestion = (chatId) => {
  const stage = userData[chatId].stage;
  const currentQuestion = questions[stage];

  if (currentQuestion.options.length > 0) {
    const options = currentQuestion.options.map(option => ({
      text: option,
      callback_data: option
    }));

    const keyboard = {
      reply_markup: {
        inline_keyboard: [options]
      }
    };

    bot.telegram.sendMessage(chatId, currentQuestion.question, keyboard)
      .then(() => console.log(`–ü–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${chatId}: ${currentQuestion.question}`))
      .catch((err) => console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–∏—Ç–∞–Ω–Ω—è:", err));
  } else {
    bot.telegram.sendMessage(chatId, currentQuestion.question) // –î–ª—è –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ–∫–∞—î–º–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      .then(() => console.log(`–ü–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${chatId}: ${currentQuestion.question}`))
      .catch((err) => console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–∏—Ç–∞–Ω–Ω—è:", err));
  }
};

// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
bot.on('callback_query', async (ctx) => {
  const chatId = ctx.chat.id;
  const userResponse = ctx.callbackQuery.data;

  if (userData[chatId]) {
    const stage = userData[chatId].stage;
    const currentQuestion = questions[stage];

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userData[chatId][currentQuestion.key] = userResponse;

    // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    if (stage < questions.length - 1) {
      userData[chatId].stage++;
      askQuestion(chatId);
    } else {
      // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
      bot.telegram.sendMessage(chatId, "–î—è–∫—É—é –∑–∞ –Ω–∞–¥–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
        .then(() => console.log(`–í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${chatId}`))
        .catch((err) => console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è:", err));

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      const lead = new Lead(userData[chatId]);

      try {
        await lead.save();
        console.log("Lead saved to database:", lead);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email —ñ–∑ –¥–∞–Ω–∏–º–∏
        sendEmail(lead);

      } catch (error) {
        console.error("Error saving lead to database:", error);
        bot.telegram.sendMessage(chatId, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
      }

      // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
      delete userData[chatId];
    }
  }
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É (email —á–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
bot.on('text', async (ctx) => {
  const chatId = ctx.chat.id;
  const userResponse = ctx.message.text;

  if (userData[chatId] && userData[chatId].stage === questions.length - 1) {
    userData[chatId].userContact = userResponse; // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É

    // –ó–∞–≤–µ—Ä—à—É—î–º–æ –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö
    bot.telegram.sendMessage(chatId, "–î—è–∫—É—é –∑–∞ –Ω–∞–¥–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.");

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    const lead = new Lead(userData[chatId]);

    try {
      await lead.save();
      console.log("Lead saved to database:", lead);
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email —ñ–∑ –¥–∞–Ω–∏–º–∏
      sendEmail(lead);

    } catch (error) {
      console.error("Error saving lead to database:", error);
      bot.telegram.sendMessage(chatId, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    delete userData[chatId];
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email
const sendEmail = (lead) => {
  const transporter = createTransport({
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASSWORD,
    }
  });

  const mailOptions = {
    from: process.env.SMTP_FROM,
    to: process.env.NOTIFY_EMAIL, // –ê–¥—Ä–µ—Å–∞, –Ω–∞ —è–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏
    subject: '–ù–æ–≤–µ –ª—ñ–¥-–∑–∞—è–≤–∫–∞!',
    text: `–Ñ –Ω–æ–≤–∞ –∑–∞—è–≤–∫–∞:

–ó–∞–¥–∞—á–∞: ${lead.task}
–ü–ª–∞–Ω: ${lead.plan}
–ë—é–¥–∂–µ—Ç: ${lead.budget}
–¢–µ—Ä–º—ñ–Ω: ${lead.timeline}
–ü–µ—Ä–µ–≤–∞–≥–∏: ${lead.techPreferences}
–ö–æ–Ω—Ç–∞–∫—Ç: ${lead.contact}
–ö–æ–Ω—Ç–∞–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${lead.userContact}` 
  };

  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.log("Error sending email:", error);
    } else {
      console.log("Email sent: " + info.response);
    }
  });
};

bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...");
